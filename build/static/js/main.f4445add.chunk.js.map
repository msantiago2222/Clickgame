{"version":3,"sources":["components/character/index.js","components/container/index.js","App.js","index.js"],"names":["Character","props","className","onClick","e","clickEvent","target","src","name","alt","Container","shake","characters","map","a","i","key","ClickyGame","state","score","highScore","navMsgColor","navMessage","allCharacters","shuffleArray","wasClicked","checkClicked","bind","clickedElem","prevState","this","slice","shuffled","includes","push","setState","setTimeout","Component","ReactDOM","render","document","getElementById"],"mappings":"iSAWeA,G,YANG,SAAAC,GAAK,OACrB,yBAAKC,UAAU,OAAOC,QAAS,SAAAC,GAAC,OAAIH,EAAMI,WAAWD,EAAEE,OAAOC,OAC5D,yBAAKL,UAAU,2BAA2BK,IAAKN,EAAMO,KAAMC,IAAI,QCcpDC,EAbG,SAAAT,GAAK,OAErB,yBACEC,UACED,EAAMU,MACF,0DACA,qDAGLV,EAAMW,WAAWC,KAAI,SAACC,EAAGC,GAAJ,OAAU,kBAAC,EAAD,CAAWP,KAAMM,EAAGE,IAAKD,EAAGV,WAAYJ,EAAMI,kBCkHnEY,E,2MA3HbC,MAAQ,CACNC,MAAO,EACPC,UAAW,EAGXC,YAAa,GAGbC,WAAY,2BAGZC,cAAe,EAAKC,eAGpBC,WAAY,GAGZd,OAAO,G,EAKTN,WAAa,EAAKqB,aAAaC,KAAlB,gB,8EAiBX,MATmB,K,mCAYRC,GAAc,IAAD,OAElBC,EAAYC,KAAKZ,MAAMO,WAAWM,QAGlCC,EAAWF,KAAKN,eAGlBL,EAAQW,KAAKZ,MAAMC,MACnBC,EAAYU,KAAKZ,MAAME,UAmB3B,GAhBKU,KAAKZ,MAAMO,WAAWQ,SAASL,KAE9BT,IAAUC,GACZD,IACAC,KAIAD,IAIFU,EAAUK,KAAKN,IAIbE,KAAKZ,MAAMO,WAAWQ,SAASL,GAAc,CAE/C,OAAOE,KAAKK,SAAS,CACnBhB,MAFU,EAGVC,UAAWA,EACXC,YAAa,YACbC,WAAY,mBACZC,cAAeS,EACfP,WAAY,GACZd,OAAO,IAgBX,OAXAmB,KAAKK,SAAS,CACZhB,MAAOA,EACPC,UAAWA,EACXC,YAAa,UACbC,WAAY,yBACZC,cAAeS,EACfP,WAAYI,EACZlB,OAAO,IAIFyB,YAAW,kBAAM,EAAKD,SAAS,CAAEd,YAAa,OAAO,O,+BAO5D,IAAMH,EAAQY,KAAKZ,MACnB,OACE,6BAQE,kBAAC,EAAD,CACEP,MAAOO,EAAMP,MACbC,WAAYM,EAAMK,cAClBlB,WAAYyB,KAAKzB,kB,GApHFgC,a,MCFzBC,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,W","file":"static/js/main.f4445add.chunk.js","sourcesContent":["import React from 'react';\r\nimport './character.css';\r\n\r\n// the onClick function is defined as a callback so that the clicked elements value\r\n// can be passed to props.clickEvent to check if the image has been clicked or not\r\nconst Character = props => (\r\n  <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\r\n    <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\r\n  </div>\r\n);\r\n\r\nexport default Character;","import React from 'react';\r\nimport './container.css';\r\nimport Character from '../character';\r\n\r\n// main container for each Character component\r\n// loops through each index in props.characters, which contains an array of character images\r\n// to create a new Character component for each image\r\n// attaches the passed down clickEvent function to each Character component\r\nconst Container = props => (\r\n  // loops through\r\n  <div\r\n    className={\r\n      props.shake\r\n        ? 'container d-flex flex-wrap justify-content-center shake'\r\n        : 'container d-flex flex-wrap justify-content-center'\r\n    }\r\n  >\r\n    {props.characters.map((a, i) => <Character name={a} key={i} clickEvent={props.clickEvent} />)}\r\n  </div>\r\n);\r\n\r\nexport default Container;","import React, { Component } from 'react';\n// import Navbar from './Navbar';\nimport Container from './components/container';\n// import Footer from './Footer';\n// import Banner from './Banner';\n// import images from '../images';\n\nclass ClickyGame extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n\n    // stores the class value to assign to navMessage based on a good or bad click\n    navMsgColor: '',\n\n    // contains intro, success, and failure message\n    navMessage: 'Click an image to begin!',\n\n    // contains an array of image urls\n    allCharacters: this.shuffleArray(),\n\n    // will track  each clicked element.\n    wasClicked: [],\n\n    // shakes the container on an incorrect guess if set to true\n    shake: false\n  };\n\n  // binds the current this context to checkClicked to have access to the current state\n  // when passed down to the Character component\n  clickEvent = this.checkClicked.bind(this);\n\n  // used to shuffle the array of images when the DOM loads, and when an image is clicked\n  shuffleArray() {\n    // creates a copy of the current characters array to modify it by value, and not by reference\n    // const newArr = images.slice();\n\n    // will store the shuffled array\n    const shuffleArr = [];\n\n    // each loop through an index gets spliced from newArr, reducing its length\n    // gets a random index based off the current length of newArr\n    // splices the value from newArr, and pushes it to shuffleArr\n    // while(newArr.length > 0) {\n    //   shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n    // }\n\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n    // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\n    const prevState = this.state.wasClicked.slice();\n\n    // shuffles the images\n    const shuffled = this.shuffleArray();\n\n    // tracks score\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // if score and highScore are the same, then there is a new highScore value\n      if (score === highScore) {\n        score++;\n        highScore++;\n\n        // if they are not equal, then only increase the score value\n      } else {\n        score++;\n      }\n\n      // adds the clicked item to wasClicked to track that it has been clicked\n      prevState.push(clickedElem);\n    }\n\n    // resets the current score if the same element was clicked twice\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: 'incorrect',\n        navMessage: 'Incorrect guess!',\n        allCharacters: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    // if this runs, then the same element has not been clicked twice and the score is increased\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: 'correct',\n      navMessage: 'You Guessed Correctly!',\n      allCharacters: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n\n    // removes the green correct indicator on a successful click after .5s to re-render the class on each success\n    return setTimeout(() => this.setState({ navMsgColor: '' }), 500);\n  }\n\n  // renders score to the navbar.\n  // passes the randomized state.allCharacters array to Container to create a Character component for each image.\n  // passes the this.checkClicked down to container to pass to each Character component to be used for the click event.\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        {/* <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          navMessage={state.navMessage}\n          navMsgColor={state.navMsgColor}\n        />\n        <Banner /> */}\n        <Container\n          shake={state.shake}\n          characters={state.allCharacters}\n          clickEvent={this.clickEvent}\n        />\n        {/* <Footer /> */}\n      </div>\n    );\n  }\n}\n\nexport default ClickyGame;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ClickyGame from './App';\nimport './index.css';\n\nReactDOM.render(<ClickyGame />, document.getElementById('root'));\n"],"sourceRoot":""}